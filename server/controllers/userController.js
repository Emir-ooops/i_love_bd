const ApiError = require('../error/ApiError');
const bcrypt = require('bcrypt')
const jwt = require('jsonwebtoken')
const {User, Basket} = require('../models/models')

const generateJwt = (id, email, role) => {
    return jwt.sign(
        {id, email, role},
        process.env.SECRET_KEY,
        {expiresIn: '24h'}
    )
}

class UserController {
    async registration(req, res, next) {
        try {
            console.log('‚û°Ô∏è –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:', req.body); // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ

            const { email, password, username, role } = req.body;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if (!email || !password) {
                console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
                return next(ApiError.badRequest('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'));
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email (–±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è)
            if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
                console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email:', email);
                return next(ApiError.badRequest('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'));
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤)
            if (password.length < 6) {
                console.log('‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å');
                return next(ApiError.badRequest('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'));
            }

            // –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email:', email);
            const candidate = await User.findOne({ where: { email } });

            if (candidate) {
                console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', email);
                return next(ApiError.badRequest('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'));
            }

            // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
            console.log('üîí –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è...');
            const hashPassword = await bcrypt.hash(password, 5);

            // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
            const user = await User.create({
                email,
                username,
                role: role || 'USER', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–æ–ª—å USER
                password: hashPassword
            });

            // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
            console.log('üõí –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID:', user.id);
            await Basket.create({ userId: user.id });

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
            console.log('üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞...');
            const token = generateJwt(user.id, user.email, user.role);

            console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', email);
            return res.json({
                token,
                user: {
                    id: user.id,
                    email: user.email,
                    username: user.username,
                    role: user.role
                }
            });

        } catch (e) {
            console.error('üî• –û—à–∏–±–∫–∞ –≤ registration –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ:', e);
            return next(ApiError.internal('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'));
        }
    }

    async login(req, res, next) {
        try {
            console.log('‚û°Ô∏è –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥:', req.body); // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ

            const {email, password} = req.body;
            if (!email || !password) {
                console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
                return next(ApiError.badRequest('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'));
            }

            const user = await User.findOne({where: {email}});
            if (!user) {
                console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', email);
                return next(ApiError.badRequest('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'));
            }

            console.log('üîç –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.id);

            const isPasswordValid = bcrypt.compareSync(password, user.password);
            if (!isPasswordValid) {
                console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id);
                return next(ApiError.badRequest('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å'));
            }

            const token = generateJwt(user.id, user.email, user.role);
            console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ç–æ–∫–µ–Ω –¥–ª—è:', user.email);

            return res.json({
                token,
                user: {
                    id: user.id,
                    email: user.email,
                    username: user.username,
                    role: user.role
                }
            });
        } catch (e) {
            console.error('üî• –û—à–∏–±–∫–∞ –≤ login –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ:', e);
            return next(ApiError.internal(e.message));
        }
    }

    async check(req, res, next) {
        try {
            const token = generateJwt(req.user.id, req.user.email, req.user.role);

            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            const user = await User.findOne({
                where: { id: req.user.id },
                attributes: ['id', 'email', 'username', 'role'] // –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
            });

            if (!user) {
                return next(ApiError.unauthorized('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'));
            }

            return res.json({
                token,
                user: {
                    id: user.id,
                    email: user.email,
                    username: user.username,
                    role: user.role
                }
            });
        } catch (e) {
            return next(ApiError.internal(e.message));
        }
    }
}

module.exports = new UserController()